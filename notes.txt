----
pytest - работает таким образом, он ишет папки и файлы с именем test (содержащим) и если мы в терминале pycharm
напишем команду pytest, то она автоматичекси запустит тесты.

Но я могу это запустить тольео из Pycharm, потому что это виртуальное окружение и из вне я его не вижу хотя могу ходить
по папкам, но команды не выполняются.

Работай чаще через командную строку в Pycharm, как в линукс - смотри manual и --help
-------------------------
--------Урок 1-----------
-------------------------
КАК ЗАВЕСТИ РЕПОЗИТОРИЙ С НУЛЯ И В ПАЙЧАРМЕ ЕГО ОБИГРАТЬ С ВИРТ ОКРУЖЕНИЕМ И ИНТЕРПРЕТАТОРОМ
К этому моменту возвращался очень часто и рещил его записать.

1. Открываем ГИТХАБ и создаем там новый репозиторий.
2. Открываем PyCharm и жмем Get From Version Control -> Clone
3. Создаем виртуальное окружение (будет хранить все наши зависимости и библиотеки). Для этого необходимо
создать виртуальное окружение с использованием нашего интерпретатора:
    Settings -> Project (с нашим именем automation_qa_art) -> Python Interpreter - > Появляется окно в
    котором есть строка адресная -> жмем Add Interpreter -> Add local interpreter -> Оперделяем в какой
    папке будет находится наше виртуальное окружение (venv) -> OK
4. Далее в дереве нашего проекта появляется папка .venv
5. Затем в терминале PyCharm прописать путь к скрипту activate
    venv/Scripts/activate    - для Windows
    source .venv/bin/activate - для Mac

-------------------------
--------Урок 2-----------
-------------------------
Создаем структуру в соответcтвии с патnерном Page Object Model, чтобы разграничивались такие понятия как
страницы, локаторы и тесты
1. Создаем в корне папку --pages-- , в которой будут распределены разные страницы нашего сайта.
Для легкости понимания все что в url:
    https://demoqa.com/elements
    https://demoqa.com/text-box
    https://demoqa.com/checkbox
    https://demoqa.com/radio-button
    и так далее , вроде как распределение по вкладкам (то есть то что отдельная страница на сайте с
    отдельным адресом)
2. Создаем в корне директорию locators.
    Здесь будут храниться файлы, которые будут содержать в себе необходимые локаторы
3. Создаем в корне папку тесты
4. Добавляю в корень файл  requirements.txt
5. Далее создаю в корне файл conftest.py - это локальный плагин, для библиотеки --pytest--
    мы его используем для того чтобы писать фикстуры, каждый из тестов будет использовать эти
    фикстуры (у нас будет одна фикстура на проекте - это фикстура нашего веб драйвера). Она будет запускать
    веб драйвер и хнарить в себе экземпляр веб драйвера и после завершения тестов, фикстура будет этот веб
    драйвер закрывать. Как результат завершения (tear down) браузер будет закрывтаься.
    ТО есть в setup - открываем браузер, а tear down мы его закрываем.
    Чтобы сделать из функции фикстуру мы пишем над названием функции знак декоратора

    Простое объяснение зачем фикстура и почему она явдяется генераторои

    @pytest.fixture
def setup_browser():
    print("Открываем браузер")
    browser = webdriver.Chrome()
    yield browser  # Передаем браузер тесту
    print("Закрываем браузер")
    browser.quit()

def test_example(setup_browser):
    print("Тест выполняется")
    assert True
Вывод
Открываем браузер
Тест выполняется
Закрываем браузер

6. В папке page создаем первую странице base_page, она является основной структурой сайта, внутри
    появляются которой  всякие окна и вклдаки, то есть как page menu

7. В Conftest.py Нужно установить библиотеки Pytest, Selenium, Webdriver_manager

Pytest - pip install pytest

Selenium - pip install selenium
РАНЬШЕ УСТАНАВЛИВАЛ - webdriver-manager , но сейчас всер решено в selenium

---------------это сейчас не работает
webdriver-manager - pip install webdriver-manager (чтобы не качать вручную и не прописывать path к драйверу)
(т.о. при выполнении тестов драйвер будет качаться и устанавливаться каждый раз автоматически)



Документация  webdriver-manager:
'https://github.com/SergeyPirogov/webdriver_manager'
	1.	Автоматическая загрузка драйверов: Вместо того, чтобы вручную загружать веб-драйверы для браузеров
	(например, ChromeDriver для Chrome или GeckoDriver для Firefox), webdriver-manager делает это автоматически.
	2.	Автоматическое обновление: webdriver-manager загружает последнюю версию драйверов, что избавляет от
	необходимости следить за обновлениями браузеров и драйверов, чтобы они соответствовали друг другу по версиям.
	3.	Управление версиями драйверов: Если нужно использовать конкретную версию драйвера, библиотека позволяет
	указать, какую именно версию вы хотите использовать.


----------А сейчас работает все проще:
from selenium import webdriver
driver = webdriver.Chrome()



8. Далее создаем нашу базовую страницу BasePage, она будет использовать наш driver. Сам по себе BasePage
будет родительским классном и от него будут наследоваться остальные странички.

-------------------------
--------Урок 3-----------
-------------------------
Работаем над BasePage и Ожидания
В BasePage мы создадим много разных методов, который нам будут облегчать работу с остальными страницами
Здесь же объяснения от Влада по поводу ожиданийЖ:
Когда мы ищем элемент по локатору без каких-либо условий, то можем выставить timesleep(5) это вроде бы неплохо, НО
если элементов и тестов очень много , то каждый раз 5 сек = это будет очень долго и неудобно. И второй минус, что
какому-то элементу не достаточно 5 секунд, то тест упадет тоже. Это выглядит неэфективно. В Selenium есть возможность
использовать через метод (.Expected_Condition - в этом модуле много методов для поиска по разн признакам)

Явные ожидание (Expected Condition) - его используем, так как нельзя и некрасиво использовать timesleep(5). Дословно
пример : Эй  веб драйвер жди 5 секунд, пока элемент с таким-то локатором не появится в дом-дереве.  То есть сам
webdriver , будет в нашем случае ждать 5 секунд и в рамках 5 секунд, каждые 500 милисекунд будет вызывать
Expected Condition, до тех пор пока не получит успешный return

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

driver = webdriver.Firefox()
driver.get("http://somedomain/url_that_delays_loading")
try:
    element = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, "myDynamicElement"))
    )
finally:
    driver.quit()

Закончил 3 урок, начинай 4

-------------------------
--------Урок 4-----------
-------------------------


на этом уроке был небольшой челендж, что кнопка submit перекрывалась рекламой (footer)и я просто взял и прописал новый
метод remove_footer в base_page, ну и просто теперь когда перекрывается что-то вставляю в код element_page или  другой
любой _page:
        self.remove_footer()
и далее дейтсвия которые нужны


-------------------------
--------Урок 4.1-----------
-------------------------
Создадим:
 папку ---data--- с файлом data.py , там будут дата классыи папку --generator-- с файлом generator.py
 они будут работать в связке

data.py - здесь создадим универсальный data класс, чтобы его сделать дата классом прописываем декратор @dataclasses


-------------------------
--------Урок 5.1 и Урок 5.2 и Урок 5.3-----------
-------------------------

Очень интересное наблюдение, если я применяю локатор (xpath или css selector) и у меня ищет множество элемнтов,
например выпадающий списко может содержать в себе одинаковые локаторы и они не уникальны , но их ровно столько
сколько элементов в выпадаюшем списке. Тогда в теле моей программе если я определю этот селектор как
elements_are_visible под этим локатором, то это будет список с со всеми этими жлементами. Удобно брать текст из сразу
всех


-------------------------
--------Урок 6-----------
-------------------------
закончил 6 урок


-------------------------
--------Урок 7-----------
-------------------------

запускать тесты с помощью командной строки так умнее
------------------------------------------------------------------
--так заупустится только тест TestWebTable
pytest tests/elements_test.py::TestElements::TestWebTable
            путь                баз класс      подкласс- сам тест
------------------------------------------------------------------
--так заупустятся все тесты в главном классе TestElements
pytest tests/elements_test.py::TestElements
            путь                баз класс
------------------------------------------------------------------

-------------------------
--------Урок 7.1, 7.2,7.3 -----------
-------------------------

начинай 7.3 c 12:10 начинай тест на удаление
